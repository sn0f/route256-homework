package mocks

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

//go:generate minimock -i route256/checkout/internal/domain/services.OrderManager -o ./mocks\order_manager_mock.go -n OrderManagerMock

import (
	"context"
	"route256/checkout/internal/domain"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
)

// OrderManagerMock implements services.OrderManager
type OrderManagerMock struct {
	t minimock.Tester

	funcCreateOrder          func(ctx context.Context, user int64, items []domain.CartItem) (op1 *domain.Order, err error)
	inspectFuncCreateOrder   func(ctx context.Context, user int64, items []domain.CartItem)
	afterCreateOrderCounter  uint64
	beforeCreateOrderCounter uint64
	CreateOrderMock          mOrderManagerMockCreateOrder

	funcStocks          func(ctx context.Context, sku uint32) (sa1 []domain.Stock, err error)
	inspectFuncStocks   func(ctx context.Context, sku uint32)
	afterStocksCounter  uint64
	beforeStocksCounter uint64
	StocksMock          mOrderManagerMockStocks
}

// NewOrderManagerMock returns a mock for services.OrderManager
func NewOrderManagerMock(t minimock.Tester) *OrderManagerMock {
	m := &OrderManagerMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.CreateOrderMock = mOrderManagerMockCreateOrder{mock: m}
	m.CreateOrderMock.callArgs = []*OrderManagerMockCreateOrderParams{}

	m.StocksMock = mOrderManagerMockStocks{mock: m}
	m.StocksMock.callArgs = []*OrderManagerMockStocksParams{}

	return m
}

type mOrderManagerMockCreateOrder struct {
	mock               *OrderManagerMock
	defaultExpectation *OrderManagerMockCreateOrderExpectation
	expectations       []*OrderManagerMockCreateOrderExpectation

	callArgs []*OrderManagerMockCreateOrderParams
	mutex    sync.RWMutex
}

// OrderManagerMockCreateOrderExpectation specifies expectation struct of the OrderManager.CreateOrder
type OrderManagerMockCreateOrderExpectation struct {
	mock    *OrderManagerMock
	params  *OrderManagerMockCreateOrderParams
	results *OrderManagerMockCreateOrderResults
	Counter uint64
}

// OrderManagerMockCreateOrderParams contains parameters of the OrderManager.CreateOrder
type OrderManagerMockCreateOrderParams struct {
	ctx   context.Context
	user  int64
	items []domain.CartItem
}

// OrderManagerMockCreateOrderResults contains results of the OrderManager.CreateOrder
type OrderManagerMockCreateOrderResults struct {
	op1 *domain.Order
	err error
}

// Expect sets up expected params for OrderManager.CreateOrder
func (mmCreateOrder *mOrderManagerMockCreateOrder) Expect(ctx context.Context, user int64, items []domain.CartItem) *mOrderManagerMockCreateOrder {
	if mmCreateOrder.mock.funcCreateOrder != nil {
		mmCreateOrder.mock.t.Fatalf("OrderManagerMock.CreateOrder mock is already set by Set")
	}

	if mmCreateOrder.defaultExpectation == nil {
		mmCreateOrder.defaultExpectation = &OrderManagerMockCreateOrderExpectation{}
	}

	mmCreateOrder.defaultExpectation.params = &OrderManagerMockCreateOrderParams{ctx, user, items}
	for _, e := range mmCreateOrder.expectations {
		if minimock.Equal(e.params, mmCreateOrder.defaultExpectation.params) {
			mmCreateOrder.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmCreateOrder.defaultExpectation.params)
		}
	}

	return mmCreateOrder
}

// Inspect accepts an inspector function that has same arguments as the OrderManager.CreateOrder
func (mmCreateOrder *mOrderManagerMockCreateOrder) Inspect(f func(ctx context.Context, user int64, items []domain.CartItem)) *mOrderManagerMockCreateOrder {
	if mmCreateOrder.mock.inspectFuncCreateOrder != nil {
		mmCreateOrder.mock.t.Fatalf("Inspect function is already set for OrderManagerMock.CreateOrder")
	}

	mmCreateOrder.mock.inspectFuncCreateOrder = f

	return mmCreateOrder
}

// Return sets up results that will be returned by OrderManager.CreateOrder
func (mmCreateOrder *mOrderManagerMockCreateOrder) Return(op1 *domain.Order, err error) *OrderManagerMock {
	if mmCreateOrder.mock.funcCreateOrder != nil {
		mmCreateOrder.mock.t.Fatalf("OrderManagerMock.CreateOrder mock is already set by Set")
	}

	if mmCreateOrder.defaultExpectation == nil {
		mmCreateOrder.defaultExpectation = &OrderManagerMockCreateOrderExpectation{mock: mmCreateOrder.mock}
	}
	mmCreateOrder.defaultExpectation.results = &OrderManagerMockCreateOrderResults{op1, err}
	return mmCreateOrder.mock
}

// Set uses given function f to mock the OrderManager.CreateOrder method
func (mmCreateOrder *mOrderManagerMockCreateOrder) Set(f func(ctx context.Context, user int64, items []domain.CartItem) (op1 *domain.Order, err error)) *OrderManagerMock {
	if mmCreateOrder.defaultExpectation != nil {
		mmCreateOrder.mock.t.Fatalf("Default expectation is already set for the OrderManager.CreateOrder method")
	}

	if len(mmCreateOrder.expectations) > 0 {
		mmCreateOrder.mock.t.Fatalf("Some expectations are already set for the OrderManager.CreateOrder method")
	}

	mmCreateOrder.mock.funcCreateOrder = f
	return mmCreateOrder.mock
}

// When sets expectation for the OrderManager.CreateOrder which will trigger the result defined by the following
// Then helper
func (mmCreateOrder *mOrderManagerMockCreateOrder) When(ctx context.Context, user int64, items []domain.CartItem) *OrderManagerMockCreateOrderExpectation {
	if mmCreateOrder.mock.funcCreateOrder != nil {
		mmCreateOrder.mock.t.Fatalf("OrderManagerMock.CreateOrder mock is already set by Set")
	}

	expectation := &OrderManagerMockCreateOrderExpectation{
		mock:   mmCreateOrder.mock,
		params: &OrderManagerMockCreateOrderParams{ctx, user, items},
	}
	mmCreateOrder.expectations = append(mmCreateOrder.expectations, expectation)
	return expectation
}

// Then sets up OrderManager.CreateOrder return parameters for the expectation previously defined by the When method
func (e *OrderManagerMockCreateOrderExpectation) Then(op1 *domain.Order, err error) *OrderManagerMock {
	e.results = &OrderManagerMockCreateOrderResults{op1, err}
	return e.mock
}

// CreateOrder implements services.OrderManager
func (mmCreateOrder *OrderManagerMock) CreateOrder(ctx context.Context, user int64, items []domain.CartItem) (op1 *domain.Order, err error) {
	mm_atomic.AddUint64(&mmCreateOrder.beforeCreateOrderCounter, 1)
	defer mm_atomic.AddUint64(&mmCreateOrder.afterCreateOrderCounter, 1)

	if mmCreateOrder.inspectFuncCreateOrder != nil {
		mmCreateOrder.inspectFuncCreateOrder(ctx, user, items)
	}

	mm_params := &OrderManagerMockCreateOrderParams{ctx, user, items}

	// Record call args
	mmCreateOrder.CreateOrderMock.mutex.Lock()
	mmCreateOrder.CreateOrderMock.callArgs = append(mmCreateOrder.CreateOrderMock.callArgs, mm_params)
	mmCreateOrder.CreateOrderMock.mutex.Unlock()

	for _, e := range mmCreateOrder.CreateOrderMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.op1, e.results.err
		}
	}

	if mmCreateOrder.CreateOrderMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmCreateOrder.CreateOrderMock.defaultExpectation.Counter, 1)
		mm_want := mmCreateOrder.CreateOrderMock.defaultExpectation.params
		mm_got := OrderManagerMockCreateOrderParams{ctx, user, items}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmCreateOrder.t.Errorf("OrderManagerMock.CreateOrder got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmCreateOrder.CreateOrderMock.defaultExpectation.results
		if mm_results == nil {
			mmCreateOrder.t.Fatal("No results are set for the OrderManagerMock.CreateOrder")
		}
		return (*mm_results).op1, (*mm_results).err
	}
	if mmCreateOrder.funcCreateOrder != nil {
		return mmCreateOrder.funcCreateOrder(ctx, user, items)
	}
	mmCreateOrder.t.Fatalf("Unexpected call to OrderManagerMock.CreateOrder. %v %v %v", ctx, user, items)
	return
}

// CreateOrderAfterCounter returns a count of finished OrderManagerMock.CreateOrder invocations
func (mmCreateOrder *OrderManagerMock) CreateOrderAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCreateOrder.afterCreateOrderCounter)
}

// CreateOrderBeforeCounter returns a count of OrderManagerMock.CreateOrder invocations
func (mmCreateOrder *OrderManagerMock) CreateOrderBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCreateOrder.beforeCreateOrderCounter)
}

// Calls returns a list of arguments used in each call to OrderManagerMock.CreateOrder.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmCreateOrder *mOrderManagerMockCreateOrder) Calls() []*OrderManagerMockCreateOrderParams {
	mmCreateOrder.mutex.RLock()

	argCopy := make([]*OrderManagerMockCreateOrderParams, len(mmCreateOrder.callArgs))
	copy(argCopy, mmCreateOrder.callArgs)

	mmCreateOrder.mutex.RUnlock()

	return argCopy
}

// MinimockCreateOrderDone returns true if the count of the CreateOrder invocations corresponds
// the number of defined expectations
func (m *OrderManagerMock) MinimockCreateOrderDone() bool {
	for _, e := range m.CreateOrderMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.CreateOrderMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterCreateOrderCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcCreateOrder != nil && mm_atomic.LoadUint64(&m.afterCreateOrderCounter) < 1 {
		return false
	}
	return true
}

// MinimockCreateOrderInspect logs each unmet expectation
func (m *OrderManagerMock) MinimockCreateOrderInspect() {
	for _, e := range m.CreateOrderMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to OrderManagerMock.CreateOrder with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.CreateOrderMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterCreateOrderCounter) < 1 {
		if m.CreateOrderMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to OrderManagerMock.CreateOrder")
		} else {
			m.t.Errorf("Expected call to OrderManagerMock.CreateOrder with params: %#v", *m.CreateOrderMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcCreateOrder != nil && mm_atomic.LoadUint64(&m.afterCreateOrderCounter) < 1 {
		m.t.Error("Expected call to OrderManagerMock.CreateOrder")
	}
}

type mOrderManagerMockStocks struct {
	mock               *OrderManagerMock
	defaultExpectation *OrderManagerMockStocksExpectation
	expectations       []*OrderManagerMockStocksExpectation

	callArgs []*OrderManagerMockStocksParams
	mutex    sync.RWMutex
}

// OrderManagerMockStocksExpectation specifies expectation struct of the OrderManager.Stocks
type OrderManagerMockStocksExpectation struct {
	mock    *OrderManagerMock
	params  *OrderManagerMockStocksParams
	results *OrderManagerMockStocksResults
	Counter uint64
}

// OrderManagerMockStocksParams contains parameters of the OrderManager.Stocks
type OrderManagerMockStocksParams struct {
	ctx context.Context
	sku uint32
}

// OrderManagerMockStocksResults contains results of the OrderManager.Stocks
type OrderManagerMockStocksResults struct {
	sa1 []domain.Stock
	err error
}

// Expect sets up expected params for OrderManager.Stocks
func (mmStocks *mOrderManagerMockStocks) Expect(ctx context.Context, sku uint32) *mOrderManagerMockStocks {
	if mmStocks.mock.funcStocks != nil {
		mmStocks.mock.t.Fatalf("OrderManagerMock.Stocks mock is already set by Set")
	}

	if mmStocks.defaultExpectation == nil {
		mmStocks.defaultExpectation = &OrderManagerMockStocksExpectation{}
	}

	mmStocks.defaultExpectation.params = &OrderManagerMockStocksParams{ctx, sku}
	for _, e := range mmStocks.expectations {
		if minimock.Equal(e.params, mmStocks.defaultExpectation.params) {
			mmStocks.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmStocks.defaultExpectation.params)
		}
	}

	return mmStocks
}

// Inspect accepts an inspector function that has same arguments as the OrderManager.Stocks
func (mmStocks *mOrderManagerMockStocks) Inspect(f func(ctx context.Context, sku uint32)) *mOrderManagerMockStocks {
	if mmStocks.mock.inspectFuncStocks != nil {
		mmStocks.mock.t.Fatalf("Inspect function is already set for OrderManagerMock.Stocks")
	}

	mmStocks.mock.inspectFuncStocks = f

	return mmStocks
}

// Return sets up results that will be returned by OrderManager.Stocks
func (mmStocks *mOrderManagerMockStocks) Return(sa1 []domain.Stock, err error) *OrderManagerMock {
	if mmStocks.mock.funcStocks != nil {
		mmStocks.mock.t.Fatalf("OrderManagerMock.Stocks mock is already set by Set")
	}

	if mmStocks.defaultExpectation == nil {
		mmStocks.defaultExpectation = &OrderManagerMockStocksExpectation{mock: mmStocks.mock}
	}
	mmStocks.defaultExpectation.results = &OrderManagerMockStocksResults{sa1, err}
	return mmStocks.mock
}

// Set uses given function f to mock the OrderManager.Stocks method
func (mmStocks *mOrderManagerMockStocks) Set(f func(ctx context.Context, sku uint32) (sa1 []domain.Stock, err error)) *OrderManagerMock {
	if mmStocks.defaultExpectation != nil {
		mmStocks.mock.t.Fatalf("Default expectation is already set for the OrderManager.Stocks method")
	}

	if len(mmStocks.expectations) > 0 {
		mmStocks.mock.t.Fatalf("Some expectations are already set for the OrderManager.Stocks method")
	}

	mmStocks.mock.funcStocks = f
	return mmStocks.mock
}

// When sets expectation for the OrderManager.Stocks which will trigger the result defined by the following
// Then helper
func (mmStocks *mOrderManagerMockStocks) When(ctx context.Context, sku uint32) *OrderManagerMockStocksExpectation {
	if mmStocks.mock.funcStocks != nil {
		mmStocks.mock.t.Fatalf("OrderManagerMock.Stocks mock is already set by Set")
	}

	expectation := &OrderManagerMockStocksExpectation{
		mock:   mmStocks.mock,
		params: &OrderManagerMockStocksParams{ctx, sku},
	}
	mmStocks.expectations = append(mmStocks.expectations, expectation)
	return expectation
}

// Then sets up OrderManager.Stocks return parameters for the expectation previously defined by the When method
func (e *OrderManagerMockStocksExpectation) Then(sa1 []domain.Stock, err error) *OrderManagerMock {
	e.results = &OrderManagerMockStocksResults{sa1, err}
	return e.mock
}

// Stocks implements services.OrderManager
func (mmStocks *OrderManagerMock) Stocks(ctx context.Context, sku uint32) (sa1 []domain.Stock, err error) {
	mm_atomic.AddUint64(&mmStocks.beforeStocksCounter, 1)
	defer mm_atomic.AddUint64(&mmStocks.afterStocksCounter, 1)

	if mmStocks.inspectFuncStocks != nil {
		mmStocks.inspectFuncStocks(ctx, sku)
	}

	mm_params := &OrderManagerMockStocksParams{ctx, sku}

	// Record call args
	mmStocks.StocksMock.mutex.Lock()
	mmStocks.StocksMock.callArgs = append(mmStocks.StocksMock.callArgs, mm_params)
	mmStocks.StocksMock.mutex.Unlock()

	for _, e := range mmStocks.StocksMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.sa1, e.results.err
		}
	}

	if mmStocks.StocksMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmStocks.StocksMock.defaultExpectation.Counter, 1)
		mm_want := mmStocks.StocksMock.defaultExpectation.params
		mm_got := OrderManagerMockStocksParams{ctx, sku}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmStocks.t.Errorf("OrderManagerMock.Stocks got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmStocks.StocksMock.defaultExpectation.results
		if mm_results == nil {
			mmStocks.t.Fatal("No results are set for the OrderManagerMock.Stocks")
		}
		return (*mm_results).sa1, (*mm_results).err
	}
	if mmStocks.funcStocks != nil {
		return mmStocks.funcStocks(ctx, sku)
	}
	mmStocks.t.Fatalf("Unexpected call to OrderManagerMock.Stocks. %v %v", ctx, sku)
	return
}

// StocksAfterCounter returns a count of finished OrderManagerMock.Stocks invocations
func (mmStocks *OrderManagerMock) StocksAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmStocks.afterStocksCounter)
}

// StocksBeforeCounter returns a count of OrderManagerMock.Stocks invocations
func (mmStocks *OrderManagerMock) StocksBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmStocks.beforeStocksCounter)
}

// Calls returns a list of arguments used in each call to OrderManagerMock.Stocks.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmStocks *mOrderManagerMockStocks) Calls() []*OrderManagerMockStocksParams {
	mmStocks.mutex.RLock()

	argCopy := make([]*OrderManagerMockStocksParams, len(mmStocks.callArgs))
	copy(argCopy, mmStocks.callArgs)

	mmStocks.mutex.RUnlock()

	return argCopy
}

// MinimockStocksDone returns true if the count of the Stocks invocations corresponds
// the number of defined expectations
func (m *OrderManagerMock) MinimockStocksDone() bool {
	for _, e := range m.StocksMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.StocksMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterStocksCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcStocks != nil && mm_atomic.LoadUint64(&m.afterStocksCounter) < 1 {
		return false
	}
	return true
}

// MinimockStocksInspect logs each unmet expectation
func (m *OrderManagerMock) MinimockStocksInspect() {
	for _, e := range m.StocksMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to OrderManagerMock.Stocks with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.StocksMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterStocksCounter) < 1 {
		if m.StocksMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to OrderManagerMock.Stocks")
		} else {
			m.t.Errorf("Expected call to OrderManagerMock.Stocks with params: %#v", *m.StocksMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcStocks != nil && mm_atomic.LoadUint64(&m.afterStocksCounter) < 1 {
		m.t.Error("Expected call to OrderManagerMock.Stocks")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *OrderManagerMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockCreateOrderInspect()

		m.MinimockStocksInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *OrderManagerMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *OrderManagerMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockCreateOrderDone() &&
		m.MinimockStocksDone()
}
